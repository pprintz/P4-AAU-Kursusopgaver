// WilderVanThanYourVan-Robot 3.0
// This robot is a sure winner

behavior onSetup():
	new hasSeenEnemy := false // Global variable, because it’s declared in onSetup()
    myRobot.body.color := color.red
	myRobot.gun.color := color.black
	myRobot.radar.color := color.yellow
;


behavior onRun():
	loop:
        // Self-defined variables don’t have myRobot                                                          
        //prepended to distinguish them from non-self-defined vars
		if hasSeenEnemy = false:
			myRobot.radar.rotate(direction.left, 360) // Non-self-defined variable
		;
		else:
    		myRobot.move(direction.forward, 50)
    		myRobot.gun.rotateLeft(360)			// either this way
    		myRobot.gun.rotate(direction.left, 360)  	// or this
    		myRobot.move(direction.backward, 50)
    		hasSeenEnemy := false
    	;
	;
;


behavior onScannedEnemy(scannedEvent):
	new hasSeenEnemy := true
	myRobot.gun.rotate(direction.right, getAngleToEnemy(scannedEvent))
	if scannedEvent.distance > 100 or myRobot.energy <= 15:
		myRobot.fire(1)
	;
	else if scannedEvent.distance > 50:
		myRobot.fire(2)
	;
	else if scannedEvent.distance = 42:
		myRobot.fire(2.42)
	;
	else:
		myRobot.fire(3)
	;
;

behavior onHitWall(hitWallEvent):
	degreesTurned := 0
	if hitWallEvent.bearing <= 0:
		degreesTurned := 90
		myRobot.body.rotate(direction.right, degreesTurned)
	;
	else:
		degreesTurned := -90
		myRobot.robot.rotate(direction.right, degreesTurned)
	;
	print("I hit a wall. Turned [degressTurned] degrees.")
;

define getAngleToEnemy(scannedEvent):
	enemyBearing := myRobot.heading + scannedEvent.bearing
	bearingFromGun := myRobot.normalRelativeAngleDegrees(enemyBearing - myRobot.gunHeading)
    return bearingFromGun 
;

