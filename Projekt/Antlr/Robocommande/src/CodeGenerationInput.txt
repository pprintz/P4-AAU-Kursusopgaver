behavior onSetup () :
    num a := 1
    // new event myCustomEvent :
    	//return false
    //;

    ahead(50)

    if a < 5 :
        ahead(10)
    ;

    myStruct { num a }
;

strategy default:
    behavior onRun () :
        if a < 5 :
            ahead(10)
        ; else if 5 < 3 :
            a := 4
        ; else :
            back(10)
        ;
        a := a + 2
    ;

    behavior onHitByBullet(hitByBulletEvent e) :
        changeStrategy("defensive")
    ;

    behavior onScannedRobot(scannedRobotEvent e) :
        changeStrategy("aggressive")
    ;

    behavior onBulletHit(bulletHitEvent e) :
        num a := 5
    ;

    behavior onHitWall(HitWallEvent e) :
        ahead(50)
    ;
;


strategy aggressive :
	behavior onRun () :
	    turnGunRight(360)
	    helloFuckingWorld := myStruct[a := 2]
	;

    behavior onHitByBullet(hitByBulletEvent e):
        changeStrategy("defensive")
    ;
;

strategy defensive :
    behavior onRun() :
    	back(100)
    ;

    behavior onScannedRobot(scannedRobotEvent e) :
        changeStrategy("aggressive")
    ;
;






///////////////////////

// grammar Robocommande ;
//
// prog : NEWLINE* setup? defaultStrategy (strategy | defineFunction)* EOF ;
//
// setup: 'behavior' 'onSetup' '('')' setupBlock;
// run: 'behavior' 'onRun' '('')' block;
//
// functions : (defineFunction | behaviorFunction)* ;
// defineFunction : 'define' type ID '(' formalParams? ')' block;
// behaviorFunction : 'behavior' ID '(' ID ID ')' block;
// formalParams: type ID (',' type ID)* ;
// actualParams: expr (',' expr)* ;
//
// strategy : 'strategy' ID strategyDefinition;
// defaultStrategy : 'strategy' 'default' strategyDefinition;
// strategyDefinition : ':' NEWLINE+ run? functions? ';' NEWLINE*;
//
// setupBlock : ':' (setupStmt)* ';' NEWLINE* ;
// block : ':' (stmt)* ';' NEWLINE* ;
//
// setupStmt : NEWLINE+ ( generalStmtPart
                 // | newEvent )? NEWLINE*
                 // ;
//
// stmt : NEWLINE+ (  generalStmtPart
                 // | returnStatement )? NEWLINE*
                 // ;
//
// generalStmtPart : declaration
                // | structDefinition
                // | assignment
                // | fieldAssignment
                // | ifStatement
                // | functionCall
                // | loop
                // ;
//
// structDefinition : ID '{' declaration (',' declaration)* '}' ;
// declaration: type ID (':=' expr)? ;
// type: 'num'
    // | 'text'
    // | 'bool'
    // | ID
    // ;
//
// newEvent : 'new' 'event' ID block ;
// fieldAssignment : fieldId ':=' expr ;
// assignment : ID ':=' expr ;
// ifStatement: 'if' expr block ('else if' expr block)* ('else' block)? ;
// functionCall: (fieldId | ID) '(' actualParams? ')' ;
// structInitialization: ID '(' assignment? (',' assignment)* ')' ;
// loop: 'loop' ('while' expr)? block ;
// returnStatement : 'return' expr ;
//
// expr :     ('true' | 'false')               # literalBool
          // | ID                              # idRef
          // | NUM                             # literalNum
          // | STRING                          # literalString
          // | fieldId                         # fieldIdentifier
          // | functionCall                    # fCall
          // | structInitialization            # structInit
          // |'(' expr ')'                     # unaryExpr
          // | 'not' expr                      # unaryExpr
          // | '-' expr                        # unaryExpr
          // | <assoc=right> expr '^' expr     # binaryExpr
          // | expr ('*'|'/'|'%') expr         # binaryExpr
          // | expr ('+'|'-') expr             # binaryExpr
          // | expr ('<='|'>='|'<'|'>') expr   # binaryExpr
          // | expr ('!='|'=') expr            # binaryExpr
          // | expr 'and' expr                 # binaryExpr
          // | expr 'or' expr                  # binaryExpr
          // ;
//
// fieldId : ID ('.' ID)+ ;
