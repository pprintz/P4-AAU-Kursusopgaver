/**
 * Automatically generated by Strava for pprintz on 2017-05-24.
 */

package Strava;

import robocode.*; 
import java.awt.Color; 
import java.lang.Math; 
import java.util.HashMap;

interface Strategy {
    void run();
    void onBattleEnded(BattleEndedEvent e);
    void onBulletHit(BulletHitEvent e);
    void onBulletHitBullet(BulletHitBulletEvent e);
    void onBulletMissed(BulletMissedEvent e);
    void onDeath(DeathEvent e);
    void onHitByBullet(HitByBulletEvent e);
    void onHitRobot(HitRobotEvent e);
    void onHitWall(HitWallEvent e);
    void onRobotDeath(RobotDeathEvent e);
    void onRoundEnded(RoundEndedEvent e);
    void onScannedRobot(ScannedRobotEvent e);
    void onStatus(StatusEvent e);
    void onWin(WinEvent e);
}

public class test3 extends AdvancedRobot implements Strategy {
    public HashMap<String, Strategy> strategies;
    public Strategy currentStrategy;

    public test3() {
        setup();
        currentStrategy = new strategy_defaultStrategy();
        strategies = new HashMap<String, Strategy>();
        strategies.put("default", currentStrategy);
        strategies.put("aggro", new strategy_aggroStrategy());
    }

    public void run() {
        System.out.println("Run: " + currentStrategy.toString());
        
        while (true) {
            currentStrategy.run();
        }
    }

    private void changeStrategy(String strategyName) {
        Strategy newStrategy = strategies.get(strategyName);
        if (newStrategy != null) {
            System.out.println("Changing to: " + strategyName);
            currentStrategy = newStrategy;
        } else {
            throw new RuntimeException("Cannot find strategy!");
        }
    }

    public void onBattleEnded(BattleEndedEvent e) { currentStrategy.onBattleEnded(e); }
    public void onBulletHit(BulletHitEvent e) { currentStrategy.onBulletHit(e); }
    public void onBulletHitBullet(BulletHitBulletEvent e) { currentStrategy.onBulletHitBullet(e); }
    public void onBulletMissed(BulletMissedEvent e) { currentStrategy.onBulletMissed(e); }
    public void onDeath(DeathEvent e) { currentStrategy.onDeath(e); }
    public void onHitByBullet(HitByBulletEvent e) { currentStrategy.onHitByBullet(e); }
    public void onHitRobot(HitRobotEvent e) { currentStrategy.onHitRobot(e); }
    public void onHitWall(HitWallEvent e) { currentStrategy.onHitWall(e); }
    public void onRobotDeath(RobotDeathEvent e) { currentStrategy.onRobotDeath(e); }
    public void onRoundEnded(RoundEndedEvent e) { currentStrategy.onRoundEnded(e); }
    public void onScannedRobot(ScannedRobotEvent e) { currentStrategy.onScannedRobot(e); }
    public void onStatus(StatusEvent e) { currentStrategy.onStatus(e); }
    public void onWin(WinEvent e) { currentStrategy.onWin(e); }
    
    double abekat = 0; 
    public void setup() {
    }

    class strategy_defaultStrategy implements Strategy {
        public void run () { }
        public void onBattleEnded(BattleEndedEvent e) { }
        public void onBulletHit(BulletHitEvent e) { }
        public void onBulletHitBullet(BulletHitBulletEvent e) { }
        public void onBulletMissed(BulletMissedEvent e) { }
        public void onDeath(DeathEvent e) { }
        public void onHitByBullet(HitByBulletEvent e) { }
        public void onHitRobot(HitRobotEvent e) { }
        public void onHitWall(HitWallEvent e) { }
        public void onRobotDeath(RobotDeathEvent e) { }
        public void onRoundEnded(RoundEndedEvent e) { }
        public void onScannedRobot(ScannedRobotEvent e) { }
        public void onStatus(StatusEvent e) { }
        public void onWin(WinEvent e) { }
    }

    class strategy_aggroStrategy extends strategy_defaultStrategy { 
        public void b() {
        }
    }

    public double Foo(double a, double b) {
        if (true) {
            double abekat = 0; 
        }
        else  {
            return 3;
        }
        return 2;
    }
    public void Bar() {
    }
}

